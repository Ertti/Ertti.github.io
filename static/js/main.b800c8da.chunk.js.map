{"version":3,"sources":["components/Sphere/components/SpherePoint/index.js","components/Sphere/index.js","components/UI/InputRange/index.js","components/Options/index.js","App.js","serviceWorker.js","index.js"],"names":["SpherePoint","state","position","positionCalc","relative","relativeCalc","relMString","this","props","relM","replace","split","Number","parseFloat","join","pitch","Math","random","PI","yaw","cosPitch","cos","x","radius","y","sin","z","className","data","filled","style","transform","show","target","href","link","title","React","Component","Sphere","items","slice","range","boxRelative","createRef","prevProps","prevState","snapshot","sliceData","relativeMatrix","getComputedStyle","current","setState","ref","map","point","index","key","links","InputRange","type","value","onChange","max","Options","rangeChangeHandler","event","linksChangeHandler","App","changeOptionsHandler","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qpiCAgEeA,G,kNA1DXC,MAAQ,CACJC,SAAU,EAAKC,eACfC,SAAU,EAAKC,gB,6DAIf,IAAIC,EAAaC,KAAKC,MAAMJ,SAGxBK,GAFJH,EAAaA,EAAWI,QAAQ,YAAa,IAAIA,QAAQ,IAAK,KAExCC,MAAM,KAI5B,OAHAF,EAAK,IAAoC,EAA9BG,OAAOC,WAAWJ,EAAK,IAClCA,EAAK,IAAoC,EAA9BG,OAAOC,WAAWJ,EAAK,IAE3B,YAAcA,EAAKK,KAAK,KAAO,M,qCAItC,IAAIC,EAAyB,IAAhBC,KAAKC,UAAmBD,KAAKE,GAAK,KAC3CC,EAAuB,IAAhBH,KAAKC,UAAmBD,KAAKE,GAAK,KAEzCE,EAAWJ,KAAKK,IAAIN,GAKxB,MAAO,CAACO,EAJAf,KAAKC,MAAMe,OAASH,EAAWJ,KAAKK,IAAIF,GAIlCK,EAHNjB,KAAKC,MAAMe,OAASP,KAAKS,IAAIN,GAAOC,EAGxBM,EAFZnB,KAAKC,MAAMe,OAASP,KAAKS,IAAIV,M,+BAOrC,OACI,yBACIY,UACI,CAAC,gBAAiBpB,KAAKC,MAAMoB,KAAKC,OAAS,wBAA0B,MAAMf,KAAK,KAEpFgB,MAAO,CACHC,UAAU,qCAAD,OACPxB,KAAKN,MAAMC,SAASoB,EADb,oCAEPf,KAAKN,MAAMC,SAASsB,EAFb,oCAGPjB,KAAKN,MAAMC,SAASwB,EAHb,oCAIPnB,KAAKN,MAAMG,YAEjB,yBAAKuB,UAAW,yBACXpB,KAAKC,MAAMwB,KAAO,uBAAGL,UAAW,uBAAwBM,OAAQ,SAAUC,KAAM3B,KAAKC,MAAMoB,KAAKO,MAAO5B,KAAKC,MAAMoB,KAAKQ,OAAa,W,GA7C/HC,IAAMC,YC0DjBC,E,kDAtDX,WAAY/B,GAAQ,IAAD,8BACf,cAAMA,IAIVP,MAAQ,CACJ2B,KAAMA,EAAKY,MAAMC,MAAM,EAAG,EAAKjC,MAAMkC,OACrCnB,OAAQ,IACRnB,SAAU,6DANV,EAAKuC,YAAcN,IAAMO,YAFV,E,+DAWAC,EAAWC,EAAWC,GACrC,GAAIF,EAAUH,QAAUnC,KAAKC,MAAMkC,MAAO,CACtC,IAAIM,EAAYpB,EAAKY,MAAMC,MAAM,EAAGlC,KAAKC,MAAMkC,OAC3CO,EAAiBC,iBAAiB3C,KAAKoC,YAAYQ,SAAlC,UACrB5C,KAAK6C,SAAL,eACO7C,KAAKN,MADZ,CACmB2B,KAAMoB,EAAW5C,SAAU6C,Q,+BAM5C,IAAD,OACL,OACI,yBAAKtB,UAAW,eACZ,yBAAKA,UAAU,iBACX,yBAAK0B,IAAK9C,KAAKoC,YAAahB,UAAW,iBAClCpB,KAAKN,MAAM2B,KAAK0B,KAAI,SAACC,EAAOC,GACzB,OAAO,kBAAC,EAAD,CACHC,IAAKD,EACLjC,OAAQ,EAAKtB,MAAMsB,OACnBK,KAAM2B,EACNnD,SAAU,EAAKH,MAAMG,SACrB4B,KAAM,EAAKxB,MAAMkD,MAAQF,c,GAnCpCnB,IAAMC,WCsBZqB,EAzBI,SAACnD,GAChB,OACI,6BACI,+BACI,8BAAOA,EAAM4B,OAAa,6BAC1B,2BAAOwB,KAAK,QAAQC,MAAOrD,EAAMqD,MAAOC,SAAUtD,EAAMsD,SAAUC,IAAKvD,EAAMuD,SC4B9EC,E,4MA9BXC,mBAAqB,SAACC,GAClB,EAAK1D,MAAMsD,SAASI,EAAMjC,OAAO4B,MAAO,EAAKrD,MAAMkD,Q,EAGvDS,mBAAqB,SAACD,GAClB,EAAK1D,MAAMsD,SAAS,EAAKtD,MAAMkC,MAAOwB,EAAMjC,OAAO4B,Q,uDAInD,OACI,6BACI,kBAAC,EAAD,CAAYzB,MAAO,SAAUyB,MAAOtD,KAAKC,MAAMkC,MAAOoB,SAAUvD,KAAK0D,mBAAoBF,IAAK,MAC9F,kBAAC,EAAD,CAAY3B,MAAO,QAASyB,MAAOtD,KAAKC,MAAMkD,MAAOI,SAAUvD,KAAK4D,mBAAoBJ,IAAKxD,KAAKC,MAAMkC,MAAQ,S,GAd1GL,IAAMC,WCwBb8B,E,4MAtBbnE,MAAQ,CACNyC,MAAO,IACPgB,MAAO,G,EAGTW,qBAAuB,SAAC3B,EAAOgB,GAC3B,EAAKN,SAAL,eACO,EAAKnD,MADZ,CACmByC,MAAOA,EAAOgB,MAAOA,M,uDAM1C,OACI,yBAAK/B,UAAU,OACb,kBAAC,EAAD,CAASe,MAAOnC,KAAKN,MAAMyC,MAAOgB,MAAOnD,KAAKN,MAAMyD,MAAOI,SAAUvD,KAAK8D,uBAC1E,kBAAC,EAAD,CAAQ3B,MAAOnC,KAAKN,MAAMyC,MAAOgB,MAAOnD,KAAKN,MAAMyD,a,GAlB3CrB,IAAMC,W,MCQJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b800c8da.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SpherePoint.scss'\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass SpherePoint extends React.Component {\r\n\r\n    state = {\r\n        position: this.positionCalc(),\r\n        relative: this.relativeCalc()\r\n    };\r\n\r\n    relativeCalc() {\r\n        let relMString = this.props.relative;\r\n        relMString = relMString.replace('matrix3d(', '').replace(')', '')\r\n\r\n        let relM = relMString.split(',');\r\n        relM[2] = (Number.parseFloat(relM[2]) * -1);\r\n        relM[8] = (Number.parseFloat(relM[8]) * -1);\r\n\r\n        return 'matrix3d(' + relM.join(',') + ')'\r\n    }\r\n\r\n    positionCalc() {\r\n        let pitch = (Math.random() * 360) * (Math.PI / 180);\r\n        let yaw = (Math.random() * 360) * (Math.PI / 180);\r\n\r\n        let cosPitch = Math.cos(pitch);\r\n        let x = this.props.radius * cosPitch * Math.cos(yaw);\r\n        let y = this.props.radius * Math.sin(yaw) * cosPitch;\r\n        let z = this.props.radius * Math.sin(pitch);\r\n\r\n        return {x: x, y: y, z: z};\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className={\r\n                    ['sphere__point', this.props.data.filled ? 'sphere__point__filled' : null].join(\" \")\r\n                }\r\n                style={{\r\n                    transform: `translate3d(\r\n                    ${this.state.position.x}px,\r\n                    ${this.state.position.y}px,\r\n                    ${this.state.position.z}px)\r\n                    ${this.state.relative}`\r\n                }}>\r\n                <div className={'sphere__point__border'}>\r\n                    {this.props.show ? <a className={'sphere__point__title'} target={'_blank'} href={this.props.data.link}>{this.props.data.title}</a> : null}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSpherePoint.propTypes = {\r\n    relative: PropTypes.string,\r\n    radius: PropTypes.number,\r\n    data: PropTypes.object,\r\n    show: PropTypes.bool\r\n};\r\n\r\n\r\nexport default SpherePoint;\r\n","import React from 'react';\r\nimport './Sphere.scss'\r\nimport PropTypes from \"prop-types\";\r\nimport data from '../../resources/data.json'\r\nimport SpherePoint from \"./components/SpherePoint\";\r\n\r\nclass Sphere extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.boxRelative = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        data: data.items.slice(0, this.props.range),\r\n        radius: 250,\r\n        relative: 'matrix3d(1, 0, -0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)',\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.range !== this.props.range) {\r\n            let sliceData = data.items.slice(0, this.props.range);\r\n            let relativeMatrix = getComputedStyle(this.boxRelative.current)[\"transform\"];\r\n            this.setState({\r\n                ...this.state, data: sliceData, relative: relativeMatrix\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={'sphere__box'}>\r\n                <div className=\"sphere__scene\">\r\n                    <div ref={this.boxRelative} className={'sphere__shape'}>\r\n                        {this.state.data.map((point, index) => {\r\n                            return <SpherePoint\r\n                                key={index}\r\n                                radius={this.state.radius}\r\n                                data={point}\r\n                                relative={this.state.relative}\r\n                                show={this.props.links > index} />\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSphere.propTypes = {\r\n    range: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n    ]),\r\n    links: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n    ])\r\n};\r\n\r\n\r\nexport default Sphere;\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst InputRange = (props) => {\r\n    return (\r\n        <div>\r\n            <label>\r\n                <span>{props.title}</span><br/>\r\n                <input type=\"range\" value={props.value} onChange={props.onChange} max={props.max} />\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n\r\nInputRange.propTypes = {\r\n    title: PropTypes.string,\r\n    max: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n    ]),\r\n    value: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n    ]),\r\n    onChange: PropTypes.func\r\n};\r\n\r\n\r\nexport default InputRange;\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport InputRange from \"../UI/InputRange\";\r\n\r\nclass Options extends React.Component{\r\n\r\n    rangeChangeHandler = (event) => {\r\n        this.props.onChange(event.target.value, this.props.links)\r\n    };\r\n\r\n    linksChangeHandler = (event) => {\r\n        this.props.onChange(this.props.range, event.target.value)\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <InputRange title={'Points'} value={this.props.range} onChange={this.rangeChangeHandler} max={400} />\r\n                <InputRange title={'Links'} value={this.props.links} onChange={this.linksChangeHandler} max={this.props.range / 5} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nOptions.propTypes = {\r\n    range: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n    ]),\r\n    links: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n    ]),\r\n    onChange: PropTypes.func\r\n};\r\n\r\nexport default Options;\r\n","import React from 'react';\nimport Sphere from \"./components/Sphere\";\nimport Options from \"./components/Options\";\n\nclass App extends React.Component {\n\n  state = {\n    range: 100,\n    links: 5,\n  };\n\n  changeOptionsHandler = (range, links) => {\n      this.setState({\n          ...this.state, range: range, links: links\n      });\n  };\n\n\n  render() {\n    return (\n        <div className=\"App\">\n          <Options range={this.state.range} links={this.state.links} onChange={this.changeOptionsHandler} />\n          <Sphere range={this.state.range} links={this.state.links} />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style/index.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}